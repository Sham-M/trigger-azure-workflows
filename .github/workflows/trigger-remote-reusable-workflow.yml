name: Create PR check and tTrigger Build workflow in remote repo

on:
  workflow_call:
    inputs:
      repo_owner:
        required: true
        type: string
      repo_name:
        required: true
        type: string
      image_type:
        required: true
        type: string

defaults:
  run:
    shell: pwsh

jobs:
  # create_pr_check:
  #   uses: ./.github/workflows/manage-pr-check.yml
  #   with:
  #     image_type: '${{ inputs.image_type }}'
  #     head_sha: '${{ github.event.pull_request.head.sha }}'
  #   secrets: inherit

  trigger-workflow:
    runs-on: ubuntu-latest
    permissions:
      checks: write
    steps:
      - name: Create Check Run with Octokit action
        id: create-status-check
        uses: actions/github-script@v6
        with:
          debug: true
          result-encoding: string
          github-token: ${{ github.token }}
          script: |
            const response = await github.rest.checks.create({
              owner: "shamil-mubarakshin",
              repo: "tests-repository",
              head_sha: "${{ github.event.pull_request.head.sha }}",
              name: "Image Build",
              status: "queued",
              output: {
                title: "${{ inputs.image_type }} Image CI",
                summary: "Build is being queued",
                text: ""
              }
            });

            return response.data.id;

      - name: Trigger Build workflow in remote repo
        env:
          BEARER_TOKEN: ${{ secrets.BEARER_TOKEN }}
        run: |
          $headers = @{
            Authorization="Bearer $env:BEARER_TOKEN"
          }

          # Private repository for builds
          $apiRepoUrl = "https://api.github.com/repos/${{ inputs.repo_owner }}/${{ inputs.repo_name }}"
          $dispatchUrl = $apiRepoUrl

          $EventType = "trigger-${{ inputs.image_type }}-build"
          $body = @{
            event_type = $EventType;
            client_payload = @{
              pr_title = "${{ github.event.pull_request.title }}"
              custom_repo = "${{ github.event.pull_request.head.repo.full_name }}"
              custom_repo_commit_hash = "${{ github.event.pull_request.head.sha }}"
              check_run_id = "${{ steps.create-status-check.outputs.result }}"
            }
          }

          $BodyString = $body | ConvertTo-Json

          # debug
          $BodyString

          try {
            Invoke-WebRequest -Uri "$dispatchUrl/dispatches" -Method Post -Headers $headers -Body $BodyString | Out-Null
          } catch {
            throw "$($_.exception[0].message)"
          }
